---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import Link from "@components/Link.astro";
import { render } from "astro:content";
import { Github } from "lucide-react";
import { Button } from "@components/ui/button";

export async function getStaticPaths() {
  const projects = (await getCollection("projects"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return projects.map((project) => ({
    params: { slug: project?.id },
    props: project,
  }));
}
type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await render(project);
---

<PageLayout title={project.data.title} description={project.data.description}>
  <Container>
    <div class="animate max-w-7xl mx-auto">
      <BackToPrev href="/"> Back to home </BackToPrev>
    </div>
    <div
      class="space-y-1 my-10 max-w-7xl mx-auto flex flex-wrap justify-between items-center"
    >
      <div class="space-y-1">
        <div class="animate flex items-center gap-1.5">
          <div class="font-base text-sm">
            <FormattedDate date={project.data.date} />
          </div>
          &bull;
          <div class="font-base text-sm">
            {readingTime(project?.body || "")}
          </div>
        </div>
        <div class="animate text-2xl font-semibold text-black dark:text-white">
          {project.data.title}
        </div>
      </div>
      {
        (project.data.demoURL || project.data.repoURL) && (
          <nav class="animate flex flex-row-reverse items-center gap-1 ">
            {project.data.demoURL && (
              <Link href={project.data.demoURL} external>
                <Button
                  variant={"default"}
                  className="bg-black text-white hover:!text-white/80 rounded-full text-sm"
                >
                  Live Demo â†’
                </Button>
              </Link>
            )}
            {project.data.demoURL && project.data.repoURL && <span>/</span>}
            {project.data.repoURL && (
              <Link href={project.data.repoURL} external>
                <Button variant={"outline"} className="rounded-full">
                  <Github />
                  repo
                </Button>
              </Link>
            )}
          </nav>
        )
      }
    </div>
    <article class="animate max-w-7xl mx-auto">
      <Content />
    </article>
  </Container>
</PageLayout>
